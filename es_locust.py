import random

from locust import TaskSet, task, events, HttpUser, between
import time
from elasticsearch import Elasticsearch, helpers

NODES = ["10.10.1.31:9200"]

L = [
    10777, 1112, 108681, 10559, 10979, 114902, 11511, 11265, 115939, 10083, 10904, 10922, 110035, 114879, 106703, 110445
    , 115023, 115160, 110841, 105880, 103216, 110526, 115013, 102840, 10526, 105698, 11127, 1011, 10727, 11181, 105780
    , 115149, 115105, 115636, 115817, 115577, 106758, 101884, 11207, 10416, 11521, 10765, 101746, 1059, 108810, 114242
    , 11509, 110978, 109202, 10444, 1081, 115151, 113520, 11428, 115311, 102377, 11583, 10429, 113796, 101739, 105781
    , 107416, 115161, 11050, 10276, 10142, 1052, 105748, 115888, 10093, 105030, 115840, 11122, 10709, 115793, 110780
    , 10023, 115397, 10488, 1148, 10035, 10382, 101983, 109794, 10570, 110002, 105785, 109724, 105855, 106499
    , 115036, 10843, 10040, 114588, 115898, 104824, 102342, 10720, 109808, 10226, 102347, 10260, 115077, 10116
    , 115287, 10717, 110702, 10961, 104994, 109150, 115901, 102022, 11373, 10407, 115156, 106365, 112339, 115460, 115915
    , 112972, 115407, 114894, 10067, 105628, 10879, 10231, 110484, 113263, 10950, 109234, 107503, 11505, 10225, 10229
    , 115540, 110127, 11253, 101626, 10809, 115916, 105647, 113393, 115602, 109806, 10943, 102694, 115296, 115194
    , 10566, 11053, 108817, 1149, 115919, 102601, 115672, 115651, 10593, 104648, 115024, 114656, 107275, 110212
    , 10151, 102445, 105868, 10378, 111701, 10008, 11398, 115367, 115419, 10086, 110138, 114670, 115401, 107341
    , 110140, 105200, 105966, 111166, 1157, 105345, 105044, 11234, 1000, 114659, 11417, 10921, 115277, 10484, 11294
    , 113229, 101873, 1092, 111185, 111592, 10882, 107693, 1152, 10284, 102809, 103079, 104814, 115394, 115681, 10867
    , 104365, 11320, 104033, 10125, 108895, 113137, 115631, 11163, 1029, 10856, 110077, 11150, 115765, 112691, 103039
    , 115400, 115122, 10852, 101730, 107719, 10198, 1071, 11108, 114289, 101608, 114655, 10207, 104298, 10772, 10839
    , 1025, 10933, 1067, 102046, 10391, 104214, 10481, 113797, 105984, 10877, 101143, 11524, 102170, 109716, 10094
    , 10412, 106160, 103001, 110446, 10774, 112589, 114899, 1145, 115475, 10431, 115412, 102767, 11323, 10869, 11477
    , 113325, 10924, 115139, 10236, 107676, 1001, 114258, 11307, 10957, 110421, 101529, 111384, 10377, 10446, 11132,
    115759, 110391
    , 10675, 1022, 11118, 10771, 10153, 106358, 10686, 104867, 115816, 114920, 114932, 101985, 102047, 10815, 108845,
    115395
    , 106426, 115606, 105804, 107598, 114590, 111581, 110570, 108729, 10243, 1056, 109810, 10863, 108589, 104350, 109756
    , 106463, 103218, 115368, 11533, 10745, 102504, 105874, 10583, 10385, 110395, 106429, 11479, 11574, 115076, 101645
    , 11038, 109206, 112755, 101792, 107458, 11090, 112410, 112698, 112238, 10631, 114989, 10434, 115109, 115832
    , 10992, 10313, 101226, 1083, 115140, 110696, 110567, 114901, 109014, 104924, 105783, 10947, 109248, 105249
    , 115276, 114288, 101904, 101981, 1068, 107031, 109758, 103601, 115015, 10702, 11033, 11285, 10148, 10056
    , 1043, 108829, 109160, 108297, 109719, 11283, 10527, 110848, 115208, 103730, 108551, 11209, 115187, 103595
    , 1098, 108438, 112854, 115731, 109230, 112806, 10522, 1039, 102276, 115473, 106368, 113225, 115476, 10713
    , 112898, 10847, 110378, 114726, 11506, 115870, 11374, 1106, 108606, 106460, 1013, 105245, 115612, 115387
    , 10729, 105052, 109755, 11083, 101905, 10567, 106482, 115017, 102296, 115643, 114828, 105712, 115142, 115726,
    115912, 1087
    , 1023, 10724, 114912, 107028, 11525, 113279, 10737, 115014, 102348, 115240, 105394, 10808, 115108, 105083
    , 115386, 1101, 11121, 10623, 10728, 104698, 10138, 11166, 10704, 110377, 114257, 10614, 107603, 1017
]


def BODY(l):
    random.shuffle(l)
    return {
        "query": {
            "function_score": {
                "query": {
                    "bool": {
                        "filter": [
                            {
                                "terms": {
                                    "sim": l[0:20]
                                }
                            },
                            {
                                "terms": {
                                    "vip_status": [
                                        2
                                    ]
                                }
                            },
                            {
                                "terms": {
                                    "needbuy_status": [
                                        0
                                    ]
                                }
                            },
                            {
                                "term": {
                                    "status": 1
                                }
                            }
                        ]
                    }
                },
                "functions": [
                    {
                        "script_score": {
                            "script": {
                                "lang": "painless",
                                "source": """
              double res = 2.0;
              return res;
""",
                                "params": {
                                    "user": {
                                        "3883": 1655878644000,
                                        "209668": 1655878640000,
                                        "220803": 1655878634000
                                    },
                                    "now": 1655885901000
                                }
                            }
                        }
                    }
                ],
                "boost_mode": "replace",
                "score_mode": "sum"
            }
        },
        "size": 1024,
        "sort": [
            {
                "_score": {
                    "order": "desc"
                }
            },
            {
                "course_id": {
                    "order": "desc"
                }
            }
        ],
        "_source": ["_id"]
    }


class reader(HttpUser):
    def __init__(self, *args, **kwargs):
        super(reader, self).__init__(*args, **kwargs)
        self.es = Elasticsearch(NODES)

    @task
    def get_must(self):
        start_time = time.time()
        try:
            result = self.es.search(
                index='1_recall_course_itemcf',
                body=BODY(L)
            )
        except Exception as e:
            total_time = int((time.time() - start_time) * 1000)
            events.request_failure.fire(request_type='GET',
                                        name='Search error',
                                        response_time=total_time,
                                        exception=e)
        else:
            total_time = int((time.time() - start_time) * 1000)
            events.request_success.fire(request_type='GET',
                                        name='Search response 200',
                                        response_time=total_time,
                                        response_length=len(result))

